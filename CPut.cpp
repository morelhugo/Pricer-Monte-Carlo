///////////////////////////////////////////////////////////////////////////
///// Fichier CPut.cpp : Definition de la classe CPut  ////////////////// 
///////////////////////////////////////////////////////////////////////////

#include "CPut.hpp"

///////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <cstdlib>
#include <cmath>
#include <ctime>

///////////////////////////////////////////////////////////////////////////

CPut::CPut(double Ki)
{
	K = Ki ;
}

///////////////////////////////////////////////////////////////////////////

CPut::~CPut()
{
}

///////////////////////////////////////////////////////////////////////////

double CPut::evaluation(double S) const
{
	if(K > S)
	{
		return (K - S) ;
	}
	else
	{
		return 0.0 ;
	}
}


///////////////////////////////////////////////////////////////////////////

double CPut::price(double T, double r, double sigma, double S0) const
{
	double Nd1 = 0.5 * (1 + erf((-d1(T, r, sigma, S0, K)) / sqrt(2))) ;
	double Nd2 = 0.5 * (1 + erf((-d2(T, r, sigma, S0, K)) / sqrt(2))) ;

	return (- S0 * Nd1 + K * exp(-r * T) * Nd2) ;
}

///////////////////////////////////////////////////////////////////////////

double CPut::delta(double T, double r, double sigma, double S0) const
{
	double Nd1 = 0.5 * (1 + erf(d1(T, r, sigma, S0, K) / sqrt(2)));

	return (Nd1 - 1) ;
}

///////////////////////////////////////////////////////////////////////////

double CPut::gamma(double T, double r, double sigma, double S0) const
{
	double d = d1(T, r, sigma, S0, K);

    return exp(-0.5 * d * d) / (S0 * sigma * sqrt(2 * CPayOff::M_2 * T));
}


///////////////////////////////////////////////////////////////////////////



